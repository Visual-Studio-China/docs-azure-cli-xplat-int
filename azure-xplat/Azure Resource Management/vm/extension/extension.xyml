commands:
- filePath: commands/arm/vm/vm._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -g, --resource-group <resource-group>
    required: -22
    optional: 0
    bool: True
    short: -g
    long: --resource-group
    description: the resource group name
  - flags: -m, --vm-name <vm-name>
    required: -15
    optional: 0
    bool: True
    short: -m
    long: --vm-name
    description: the virtual machine name
  - flags: -n, --name <name>
    required: -12
    optional: 0
    bool: True
    short: -n
    long: --name
    description: the extension name
  - flags: -p, --publisher-name <publisher-name>
    required: -22
    optional: 0
    bool: True
    short: -p
    long: --publisher-name
    description: the publisher name
  - flags: -o, --version <version>
    required: -15
    optional: 0
    bool: True
    short: -o
    long: --version
    description: the extension version
  - flags: -r, --reference-name <reference-name>
    required: -22
    optional: 0
    bool: True
    short: -r
    long: --reference-name
    description: extension's reference name
  - flags: -i, --public-config <public-config>
    required: -21
    optional: 0
    bool: True
    short: -i
    long: --public-config
    description: public configuration text
  - flags: -c, --public-config-path <public-config-path>
    required: -26
    optional: 0
    bool: True
    short: -c
    long: --public-config-path
    description: public configuration file path
  - flags: -f, --private-config <private-config>
    required: -22
    optional: 0
    bool: True
    short: -f
    long: --private-config
    description: private configuration text
  - flags: -e, --private-config-path <private-config-path>
    required: -27
    optional: 0
    bool: True
    short: -e
    long: --private-config-path
    description: private configuration file path
  - flags: -u, --uninstall
    required: 0
    optional: 0
    bool: True
    short: -u
    long: --uninstall
    description: uninstall extension
  - flags: -t, --tags <tags>
    required: -12
    optional: 0
    bool: True
    short: -t
    long: --tags
    description: Tags to set to the resource group. Can be mutliple. In the format of 'name=value'. Name is required and value is optional. For example, -t tag1=value1;tag2
  - flags: -q, --quiet
    required: 0
    optional: 0
    bool: True
    short: -q
    long: --quiet
    description: quiet mode, do not ask for uninstall confirmation
  - flags: -U, --auto-upgrade-minor-version
    required: 0
    optional: 0
    bool: True
    short: -U
    long: --auto-upgrade-minor-version
    description: Pick the highest minor version of the extension
  - flags: --force-update-tag <force-update-tag>
    required: -20
    optional: 0
    bool: True
    long: --force-update-tag
    description: 'Sample input: RerunExtension. Specifies that the extension should be run again with the same public or protected settings. The value can be any string different from the current value. If forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler.'
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription id
  name: set
  description: Enable/disable resource extensions for a VM in a resource group
  usage: '[options] <resource-group> <vm-name> <name> <publisher-name> <version>'
- filePath: commands/arm/vm/vm._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -g, --resource-group <resource-group>
    required: -22
    optional: 0
    bool: True
    short: -g
    long: --resource-group
    description: the resource group name
  - flags: -m, --vm-name <vm-name>
    required: -15
    optional: 0
    bool: True
    short: -m
    long: --vm-name
    description: the virtual machine name
  - flags: -o, --version <version>
    required: -15
    optional: 0
    bool: True
    short: -o
    long: --version
    description: the extension version
  - flags: -R, --run-list <run-list>
    required: -16
    optional: 0
    bool: True
    short: -R
    long: --run-list
    description: Runlist of roles/recipes to apply to VM
  - flags: -O, --validation-pem <validation-pem>
    required: -22
    optional: 0
    bool: True
    short: -O
    long: --validation-pem
    description: chef validation pem file path. Not required if -C or --client-pem option specified
  - flags: -c, --client-config <client-config>
    required: -21
    optional: 0
    bool: True
    short: -c
    long: --client-config
    description: chef client configuration file(i.e client.rb) path
  - flags: -C, --client-pem <client-pem>
    required: -18
    optional: 0
    bool: True
    short: -C
    long: --client-pem
    description: chef client pem file path i.e required in validator less bootstrap
  - flags: -j, --bootstrap-options <bootstrap-json-attribute>
    required: -25
    optional: 0
    bool: True
    short: -j
    long: --bootstrap-options
    description: "Bootstrap options in JSON format. Ex: -j '{\"chef_node_name\":\"test_node\"}'"
  - flags: -u, --uninstall
    required: 0
    optional: 0
    bool: True
    short: -u
    long: --uninstall
    description: uninstall extension
  - flags: -t, --tags <tags>
    required: -12
    optional: 0
    bool: True
    short: -t
    long: --tags
    description: Tags to set to the resource group. Can be multiple. In the format of 'name=value'. Name is required and value is optional. For example, -t tag1=value1;tag2
  - flags: -q, --quiet
    required: 0
    optional: 0
    bool: True
    short: -q
    long: --quiet
    description: quiet mode, do not ask for uninstall confirmation
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription id
  - flags: --json-attributes <json-attributes>
    required: -19
    optional: 0
    bool: True
    long: --json-attributes
    description: "A JSON string to be added to the first run of chef-client. Ex: --json-attributes '{\"foo\" : \"bar\"}'"
  name: set-chef
  description: Enable/disable chef extension for a VM in a resource group
  usage: '[options] <resource-group> <vm-name> '
- filePath: commands/arm/vm/vm._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -g, --resource-group <resource-group>
    required: -22
    optional: 0
    bool: True
    short: -g
    long: --resource-group
    description: the resource group name
  - flags: -m, --vm-name <vm-name>
    required: -15
    optional: 0
    bool: True
    short: -m
    long: --vm-name
    description: the virtual machine name
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription id
  name: get
  description: Get extensions installed on a virtual machine in a resource group
  usage: '[options] <resource-group> <vm-name>'
- filePath: commands/arm/vm/vm._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -g, --resource-group <resource-group>
    required: -22
    optional: 0
    bool: True
    short: -g
    long: --resource-group
    description: the resource group name
  - flags: -m, --vm-name <vm-name>
    required: -15
    optional: 0
    bool: True
    short: -m
    long: --vm-name
    description: the virtual machine name
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription id
  name: get-chef
  description: Get chef extension installed on a virtual machine in a resource group
  usage: '[options] <resource-group> <vm-name>'
name: extension
description: Commands to manage VM resource extensions
usage: '[options] [command]'
