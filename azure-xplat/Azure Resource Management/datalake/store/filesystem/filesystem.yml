### YamlMime:AzureXplatCli
commands:
- name: list
  description: Lists the contents of the specified path (files and folders).
  usage: '[options] <accountName> <path>'
  filePath: commands/arm/datalakestore/datalakestore._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -n --accountName <accountName>
    required: -18
    optional: 0
    bool: True
    short: -n
    long: --accountName
    description: the Data Lake Store account name to execute the action on
  - flags: -p --path <path>
    required: -11
    optional: 0
    bool: True
    short: -p
    long: --path
    description: the full path to the folder to list (e.g. /someFolder or /someFolder/someNestedFolder)
  - flags: -l --listSize <listSize>
    required: -15
    optional: 0
    bool: True
    short: -l
    long: --listSize
    description: the optional number of entries to list. The default is all entries, which can potentially take some time for large directories.)
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription identifier
- name: show
  description: Gets the specified Data Lake Store file or folder details
  usage: '[options] <accountName> <path>'
  filePath: commands/arm/datalakestore/datalakestore._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -n --accountName <accountName>
    required: -18
    optional: 0
    bool: True
    short: -n
    long: --accountName
    description: the Data Lake Store account name to execute the action on
  - flags: -p --path <path>
    required: -11
    optional: 0
    bool: True
    short: -p
    long: --path
    description: the full path to the folder or file to get (e.g. /someFolder or /someFolder/someFile.txt)
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription identifier
- name: delete
  description: deletes the specified Data Lake Store file or folder, with the option for recursive delete (if the folder has contents)
  usage: '[options] <accountName> <path>'
  filePath: commands/arm/datalakestore/datalakestore._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -n --accountName <accountName>
    required: -18
    optional: 0
    bool: True
    short: -n
    long: --accountName
    description: the Data Lake Store account name to execute the action on
  - flags: -p --path <path>
    required: -11
    optional: 0
    bool: True
    short: -p
    long: --path
    description: the full path to the folder or file to get (e.g. /someFolder or /someFolder/someFile.txt)
  - flags: -r --recurse
    required: 0
    optional: 0
    bool: True
    short: -r
    long: --recurse
    description: optionally indicates that this should be a recursive delete, which will delete a folder and all contents underneath it.
  - flags: -q --quiet
    required: 0
    optional: 0
    bool: True
    short: -q
    long: --quiet
    description: optionally indicates the delete should be immediately performed with no confirmation or prompting. Use carefully.
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription identifier
- name: create
  description: Creates the specified folder or file, with the option to include content in file creation.
  usage: '[options] <accountName> <path>'
  filePath: commands/arm/datalakestore/datalakestore._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -n --accountName <accountName>
    required: -18
    optional: 0
    bool: True
    short: -n
    long: --accountName
    description: the Data Lake Store account name to execute the action on
  - flags: -p --path <path>
    required: -11
    optional: 0
    bool: True
    short: -p
    long: --path
    description: the full path to the file to add content to (e.g. /someFolder/someFile.txt)
  - flags: -v --value <value>
    required: -12
    optional: 0
    bool: True
    short: -v
    long: --value
    description: 'optional indicates the contents (as a string) to create the file with. NOTE: This parameter cannot be specified with --folder (-d)'
  - flags: -d --folder
    required: 0
    optional: 0
    bool: True
    short: -d
    long: --folder
    description: 'optionally specify that the item being created is a folder, not a file. If this is not specified, a file will be created. NOTE: This parameter cannot be specified with --encoding (-e) or --value (-v)'
  - flags: -f --force
    required: 0
    optional: 0
    bool: True
    short: -f
    long: --force
    description: optionally indicates that the file or folder being created can overwrite the file or folder at path if it already exists (default is false). 'true' must be passed in for the overwrite to work
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription identifier
- name: import
  description: Uploads the specified the specified file, to the target destination in an Azure Data Lake.
  usage: '[options] <accountName> <path> <destination>'
  filePath: commands/arm/datalakestore/datalakestore._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -n --accountName <accountName>
    required: -18
    optional: 0
    bool: True
    short: -n
    long: --accountName
    description: the Data Lake Store account name to execute the action on
  - flags: -p --path <path>
    required: -11
    optional: 0
    bool: True
    short: -p
    long: --path
    description: the full local path to the file to import (e.g. /someFolder/someFile.txt or C:somefoldersomeFile.txt)
  - flags: -d --destination <destination>
    required: -18
    optional: 0
    bool: True
    short: -d
    long: --destination
    description: the full path in the Data Lake Store where the file should be imported to (e.g. /someFolder/someFile.txt
  - flags: -f --force
    required: 0
    optional: 0
    bool: True
    short: -f
    long: --force
    description: optionally indicates that the file or folder being created can overwrite the file or folder at path if it already exists (default is false). 'true' must be passed in for the overwrite to work
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription identifier
- name: concat
  description: Concatenates the specified list of files into the specified destination file.
  usage: '[options] <accountName> <paths> <destination>'
  filePath: commands/arm/datalakestore/datalakestore._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -n --accountName <accountName>
    required: -18
    optional: 0
    bool: True
    short: -n
    long: --accountName
    description: the Data Lake Store account name to execute the action on
  - flags: -p --paths <paths>
    required: -12
    optional: 0
    bool: True
    short: -p
    long: --paths
    description: a comma seperated list of full paths to concatenate (e.g. '/someFolder/someFile.txt,/somefolder/somefile2.txt,/anotherFolder/newFile.txt')
  - flags: -d --destination <destination>
    required: -18
    optional: 0
    bool: True
    short: -d
    long: --destination
    description: specify the target file that all of the files in --paths should be concatenated into (e.g /someFolder/targetFile.txt)
  - flags: -f --force
    required: 0
    optional: 0
    bool: True
    short: -f
    long: --force
    description: optionally indicates that the file or folder being created can overwrite the file or folder at path if it already exists (default is false). 'true' must be passed in for the overwrite to work
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription identifier
- name: move
  description: Moves (renames) the specified file or folder into the specified destination file or folder.
  usage: '[options] <accountName> <path> <destination>'
  filePath: commands/arm/datalakestore/datalakestore._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -n --accountName <accountName>
    required: -18
    optional: 0
    bool: True
    short: -n
    long: --accountName
    description: the Data Lake Store account name to execute the action on
  - flags: -p --path <path>
    required: -11
    optional: 0
    bool: True
    short: -p
    long: --path
    description: the path to the file or folder to move (e.g. /someFolder or /someFolder/someFile.txt)
  - flags: -d --destination <destination>
    required: -18
    optional: 0
    bool: True
    short: -d
    long: --destination
    description: specify the target location to move the file or folder to
  - flags: -f --force
    required: 0
    optional: 0
    bool: True
    short: -f
    long: --force
    description: optionally indicates that the file or folder being created can overwrite the file or folder at path if it already exists (default is false). 'true' must be passed in for the overwrite to work
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription identifier
- name: addcontent
  description: Appends the specified content to the end of the Data Lake Store file path specified.
  usage: '[options] <accountName> <path> <value>'
  filePath: commands/arm/datalakestore/datalakestore._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -n --accountName <accountName>
    required: -18
    optional: 0
    bool: True
    short: -n
    long: --accountName
    description: the Data Lake Store account name to execute the action on
  - flags: -p --path <path>
    required: -11
    optional: 0
    bool: True
    short: -p
    long: --path
    description: the full path to the file to add content to (e.g. /someFolder/someFile.txt)
  - flags: -v --value <value>
    required: -12
    optional: 0
    bool: True
    short: -v
    long: --value
    description: the contents to append to the file
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription identifier
- name: export
  description: Downloads the specified file to the target location.
  usage: '[options] <accountName> <path> <destination>'
  filePath: commands/arm/datalakestore/datalakestore._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -n --accountName <accountName>
    required: -18
    optional: 0
    bool: True
    short: -n
    long: --accountName
    description: the Data Lake Store account name to execute the action on
  - flags: -p --path <path>
    required: -11
    optional: 0
    bool: True
    short: -p
    long: --path
    description: the full path in the Data Lake Store where the file should be imported to (e.g. /someFolder/someFile.txt
  - flags: -d --destination <destination>
    required: -18
    optional: 0
    bool: True
    short: -d
    long: --destination
    description: the full local path to the file to import (e.g. /someFolder/someFile.txt or C:somefoldersomeFile.txt)
  - flags: -f --force
    required: 0
    optional: 0
    bool: True
    short: -f
    long: --force
    description: optionally indicates that the file being created can overwrite the file at path if it already exists (default is false).
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription identifier
- name: read
  description: Previews the specified Data Lake Store file starting at index 0 (or the specified offset) until the length is reached, displaying the results to the console.
  usage: '[options] <accountName> <path>'
  filePath: commands/arm/datalakestore/datalakestore._js
  options:
  - flags: -v, --verbose
    required: 0
    optional: 0
    bool: True
    short: -v
    long: --verbose
    description: use verbose output
  - flags: -vv
    required: 0
    optional: 0
    bool: True
    long: -vv
    description: more verbose with debug output
  - flags: --json
    required: 0
    optional: 0
    bool: True
    long: --json
    description: use json output
  - flags: -n --accountName <accountName>
    required: -18
    optional: 0
    bool: True
    short: -n
    long: --accountName
    description: the Data Lake Store account name to execute the action on
  - flags: -p --path <path>
    required: -11
    optional: 0
    bool: True
    short: -p
    long: --path
    description: the full path to the file to download (e.g. /someFolder/someFile.txt)
  - flags: -l --length <length>
    required: -13
    optional: 0
    bool: True
    short: -l
    long: --length
    description: optionally specify the length, in bytes, to read from the file. If not specified will attempt to display all content after offset. If that length is greater than 1MB a length must be specified.
  - flags: -o --offset <offset>
    required: -13
    optional: 0
    bool: True
    short: -o
    long: --offset
    description: the optional offset to begin reading at (default is 0)
  - flags: -f --force
    required: 0
    optional: 0
    bool: True
    short: -f
    long: --force
    description: optionally forces previewing of a full file. Use with caution, as this can cause instability and hangs with very large files.
  - flags: -s, --subscription <id>
    required: -20
    optional: 0
    bool: True
    short: -s
    long: --subscription
    description: the subscription identifier
name: filesystem
description: Commands to manage your Data Lake Storage FileSystem
usage: '[options] [command]'
Metadata:
  content_git_url: https://github.com/Visual-Studio-China/azure-xplat-cli/blob/dev/azure-xplat/Azure%20Resource%20Management/datalake/store/filesystem/filesystem.yml
  update_at: 12/26/2016 8:33 AM
  ms.date: 12/26/2016
  gitcommit: https://github.com/Visual-Studio-China/azure-xplat-cli/blob/6e1e5d8c04f7446d91fcaca88663dcd6cdef9a3a/azure-xplat/Azure%20Resource%20Management/datalake/store/filesystem/filesystem.yml
  ms.topic: reference
